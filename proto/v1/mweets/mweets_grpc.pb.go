// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: v1/mweets/mweets.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MweetsClient is the client API for Mweets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MweetsClient interface {
	CreateMweet(ctx context.Context, in *CreateMweetRequest, opts ...grpc.CallOption) (*MweetResponse, error)
	GetAllMweeter(ctx context.Context, in *ListMweetsRequest, opts ...grpc.CallOption) (Mweets_GetAllMweeterClient, error)
	UpdateMweet(ctx context.Context, in *UpdateMweetRequest, opts ...grpc.CallOption) (*MweetResponse, error)
	DeleteMweet(ctx context.Context, in *DeleteMweetRequest, opts ...grpc.CallOption) (*DeleteMweetResponse, error)
}

type mweetsClient struct {
	cc grpc.ClientConnInterface
}

func NewMweetsClient(cc grpc.ClientConnInterface) MweetsClient {
	return &mweetsClient{cc}
}

func (c *mweetsClient) CreateMweet(ctx context.Context, in *CreateMweetRequest, opts ...grpc.CallOption) (*MweetResponse, error) {
	out := new(MweetResponse)
	err := c.cc.Invoke(ctx, "/v1.mweets.mweets/CreateMweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mweetsClient) GetAllMweeter(ctx context.Context, in *ListMweetsRequest, opts ...grpc.CallOption) (Mweets_GetAllMweeterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mweets_ServiceDesc.Streams[0], "/v1.mweets.mweets/GetAllMweeter", opts...)
	if err != nil {
		return nil, err
	}
	x := &mweetsGetAllMweeterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mweets_GetAllMweeterClient interface {
	Recv() (*Mweet, error)
	grpc.ClientStream
}

type mweetsGetAllMweeterClient struct {
	grpc.ClientStream
}

func (x *mweetsGetAllMweeterClient) Recv() (*Mweet, error) {
	m := new(Mweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mweetsClient) UpdateMweet(ctx context.Context, in *UpdateMweetRequest, opts ...grpc.CallOption) (*MweetResponse, error) {
	out := new(MweetResponse)
	err := c.cc.Invoke(ctx, "/v1.mweets.mweets/UpdateMweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mweetsClient) DeleteMweet(ctx context.Context, in *DeleteMweetRequest, opts ...grpc.CallOption) (*DeleteMweetResponse, error) {
	out := new(DeleteMweetResponse)
	err := c.cc.Invoke(ctx, "/v1.mweets.mweets/DeleteMweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MweetsServer is the server API for Mweets service.
// All implementations must embed UnimplementedMweetsServer
// for forward compatibility
type MweetsServer interface {
	CreateMweet(context.Context, *CreateMweetRequest) (*MweetResponse, error)
	GetAllMweeter(*ListMweetsRequest, Mweets_GetAllMweeterServer) error
	UpdateMweet(context.Context, *UpdateMweetRequest) (*MweetResponse, error)
	DeleteMweet(context.Context, *DeleteMweetRequest) (*DeleteMweetResponse, error)
	mustEmbedUnimplementedMweetsServer()
}

// UnimplementedMweetsServer must be embedded to have forward compatible implementations.
type UnimplementedMweetsServer struct {
}

func (UnimplementedMweetsServer) CreateMweet(context.Context, *CreateMweetRequest) (*MweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMweet not implemented")
}
func (UnimplementedMweetsServer) GetAllMweeter(*ListMweetsRequest, Mweets_GetAllMweeterServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMweeter not implemented")
}
func (UnimplementedMweetsServer) UpdateMweet(context.Context, *UpdateMweetRequest) (*MweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMweet not implemented")
}
func (UnimplementedMweetsServer) DeleteMweet(context.Context, *DeleteMweetRequest) (*DeleteMweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMweet not implemented")
}
func (UnimplementedMweetsServer) mustEmbedUnimplementedMweetsServer() {}

// UnsafeMweetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MweetsServer will
// result in compilation errors.
type UnsafeMweetsServer interface {
	mustEmbedUnimplementedMweetsServer()
}

func RegisterMweetsServer(s grpc.ServiceRegistrar, srv MweetsServer) {
	s.RegisterService(&Mweets_ServiceDesc, srv)
}

func _Mweets_CreateMweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MweetsServer).CreateMweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.mweets.mweets/CreateMweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MweetsServer).CreateMweet(ctx, req.(*CreateMweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mweets_GetAllMweeter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMweetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MweetsServer).GetAllMweeter(m, &mweetsGetAllMweeterServer{stream})
}

type Mweets_GetAllMweeterServer interface {
	Send(*Mweet) error
	grpc.ServerStream
}

type mweetsGetAllMweeterServer struct {
	grpc.ServerStream
}

func (x *mweetsGetAllMweeterServer) Send(m *Mweet) error {
	return x.ServerStream.SendMsg(m)
}

func _Mweets_UpdateMweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MweetsServer).UpdateMweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.mweets.mweets/UpdateMweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MweetsServer).UpdateMweet(ctx, req.(*UpdateMweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mweets_DeleteMweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MweetsServer).DeleteMweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.mweets.mweets/DeleteMweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MweetsServer).DeleteMweet(ctx, req.(*DeleteMweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mweets_ServiceDesc is the grpc.ServiceDesc for Mweets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mweets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.mweets.mweets",
	HandlerType: (*MweetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMweet",
			Handler:    _Mweets_CreateMweet_Handler,
		},
		{
			MethodName: "UpdateMweet",
			Handler:    _Mweets_UpdateMweet_Handler,
		},
		{
			MethodName: "DeleteMweet",
			Handler:    _Mweets_DeleteMweet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllMweeter",
			Handler:       _Mweets_GetAllMweeter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/mweets/mweets.proto",
}
